#!/usr/bin/env ruby
# frozen_string_literal: true

require './config'
require 'time'
require 'curb'
require 'socket'
require 'yaml'
require 'json'
require 'base64'

class MyHTTPServer < TCPServer
  class << self
    def main(port)
      server_main(new(port).accept)
    end

    private

    def get_code(io_port)
      while (l = io_port.gets.strip)
        break if l.empty?

        re = %r{/?code=(\S+)}
        return Regexp.last_match(1).scan(re)[0][0] if l =~ /^GET (\S+)/
      end
      raise
    end

    def server_main(client)
      code = get_code(client)
      data = <<~DATA
        HTTP/1.1 200 OK
        Content-Type: text/plain

        OK
      DATA
      client.write(data)
      client.close
      code
    end
  end
end

module Zoom
  class << self
    def oauth
      url = "https://zoom.us/oauth/authorize?response_type=code&client_id=#{CLIENT_ID}&redirect_uri=#{REDIRECT_URI}"
      res = Curl.get(url)
      raise if res.response_code != 302

      headers = res.header_str.scan(/^(\S+): (.*)$/)
      headers = headers.to_h.transform_values(&:strip)
      print "open #{headers['location'].strip}\n"

      MyHTTPServer.main(REDIRECT_PORT)
    end

    def get_token(code)
      a = { 'code' => code,
            'grant_type' => 'authorization_code',
            'redirect_uri' => REDIRECT_URI }
      a = a.map { |i| i.join('=') }.join('&')
      e = Curl::Easy.new('https://zoom.us/oauth/token')
      base64 = Base64.strict_encode64("#{CLIENT_ID}:#{CLIENT_SECRET}")
      e.headers['Authorization'] = "Basic #{base64}"
      e.http_post(a)
      JSON.parse(e.body)
    end

    def auth
      token = Zoom.get_token(Zoom.oauth)
      open('token.yaml', 'w') { |fp| fp.write(YAML.dump(token)) }
      token
    end
  end
end

class RecordingFilesInfo < Hash
  class << self
    def download(filename, url)
      if File.exist?(filename)
        print "  Already exists: #{filename}\n"
      else
        print "  Getting: #{filename}\n"
        File.write(filename, Zoom.bearer_get(url))
      end
    end
  end

  def process
    time = Time.parse(self['recording_start']).localtime
    name = time.strftime('%Y%m%d%H%M')
    if self['status'] == 'processing'
      print "  Processing: #{name}\n"
      return
    end
    return if (ext = self['file_extension'].downcase) == 'm4a'

    self.class.download(time.strftime("#{name}.#{ext}"),
                        self['download_url'])
  end
end

module Zoom
  class Error404 < RuntimeError
  end
  class << self
    def token(force: false)
      return @token if !force && @token

      filename = 'token.yaml'
      @token = if !force && File.exist?(filename)
                 YAML.load_file('token.yaml')
               else
                 Zoom.auth
               end
      @token = @token['access_token']
    end

    def bearer_get_curl(url)
      e = Curl::Easy.new(url)
      e.headers['Authorization'] = "Bearer #{token}"
      e.follow_location = true
      e.http_get && e
    end

    def bearer_get(url, again: false)
      e = bearer_get_curl(url)
      return e.body if e.response_code == 200
      raise Error404, url if e.response_code == 404

      if e.response_code == 401 && !again
        # Unauthorized response status code
        token(force: true)
        return bearer_get(url, again: true)
      end
      pp url
      pp e.response_code
      raise
    end

    def api(path, param = [])
      url = "https://api.zoom.us/v2#{path}"
      a = param.map { |i| i.join('=') }.join('&')
      url = "#{url}?#{a}" unless a.empty?
      b = bearer_get(url)
      begin
        JSON.parse(b)
      rescue JSON::ParserError
        b
      end
    end

    def fetch_recordings
      r = Zoom.api('/users/me/recordings',
                   { 'from' => (Date.today - 14).strftime('%Y-%m-%d') })
      print %w[from to].map { |i| r[i] }.join(' - '), "\n"
      r['meetings'].each do |i|
        print "Topic: #{i['topic']}\n"
        i['recording_files'].each { |j| RecordingFilesInfo[j].process }
      end
    end
  end
end

Zoom.fetch_recordings if __FILE__ == $PROGRAM_NAME
